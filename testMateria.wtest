import materia.*
describe "Materia" {

   const programacion = new Carrera()
   const medicina = new Carrera()

   const elemProgramacion = new Materia()
   const objetos1 = new Materia()
   const objetos2 = new Materia()
   const matematicas1 = new Materia()
   const objetos3 = new Materia()
   const trabajoFinal = new Materia()
   const baseDatos = new Materia()

   const quimica = new Materia()
   const bio1 = new Materia()
   const bio2 = new Materia()
   const anaGeneral = new Materia()

   const roque = new Estudiante()


   method initialize(){


    roque.cursar(programacion)
    roque.cursar(medicina)

    programacion.agregarMateria(elemProgramacion)
    programacion.agregarMateria(objetos1)
    programacion.agregarMateria(objetos2)
    programacion.agregarMateria(objetos3)
    programacion.agregarMateria(matematicas1)
    programacion.agregarMateria(trabajoFinal)
    programacion.agregarMateria(baseDatos)

    objetos2.agregarCoorrelativa(objetos1)
    objetos2.agregarCoorrelativa(matematicas1)

    objetos3.agregarCoorrelativa(objetos1)
    objetos3.agregarCoorrelativa(objetos2)
    objetos3.agregarCoorrelativa(matematicas1)

    medicina.agregarMateria(quimica)
    medicina.agregarMateria(bio1)
    medicina.agregarMateria(bio2)
    medicina.agregarMateria(anaGeneral)
    
    
    roque.aprobar(objetos1, 8)
    roque.aprobar(matematicas1, 10)


    
   }
  test "cantidad de materias aprobadas de roque , 2 (matematica1 , objetos1)" {
 

    assert.equals(2, roque.cantidadAprobadas())




    
  }

  test "promedio  de roque, objetos1 aprobado con 8 y matematicas con 10, promedio 9" {
    
    assert.equals(9, roque.promedio())
  }


  test "roque tiene aprobada matematicas 1  pero no tiene aprobada objetos2" {
    
    assert.that(roque.tieneAprobada(matematicas1))
    assert.notThat(roque.tieneAprobada(objetos2))
    
  }

  test "se quiere registar una materia aprobada a roque (matematicas1) pero ya la tiene aprobada" {
    assert.throwsException({ roque.aprobar(matematicas1,10) })
  }

  test "todas las materias  en las que roque esta inscripto,   todas las de programacion y medicina " {
    
    assert.equals(#{elemProgramacion,matematicas1,objetos1,
                   objetos2,objetos3,trabajoFinal,baseDatos,quimica,bio1,bio2,anaGeneral}, roque.materiasInscriptas())
  }

 test "objetos2 corresponde a una carrera que cursa roque" {

    assert.that(objetos2.correspondeACarrera(roque))
   
 }

 test "roque todavia no aprobo objetos2" {
   assert.notThat(roque.tieneAprobada(objetos2))
 }

 test "roque no debe estar inscripto en objetos 2 " {
   assert.notThat(roque.estaInscripto(objetos2))
 }

 test "roque Debe tener  todas las materias que tienen como correlativa a objetos2 (objetos1,matematicas1)" {
   assert.that(roque.esAptoParaCursar(objetos2))
 }

 test "roque puede inscribirse en objetos2" {

    assert.that(roque.puedeInscribirse(objetos2))
 }

  test "roque queda inscripto en  objetos 2 pero no puede inscribirse  en objetos 3" {
    roque.inscribirse(objetos2)

    assert.that(roque.estaInscripto(objetos2))
    assert.throwsException({ roque.inscribirse(objetos3) })

    
  }


 
}